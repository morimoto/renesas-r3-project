============== -*- outline -*- ==============

		R4 management

2022/05/25	Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
=============================================

* Which device will be covered by R4

	see also [README.api]

	--TBD--

	[possible]
	I2C, DMA, Thermal, INTC, PWN, TMU, etc

	[not impossible]
	Clock, Sound, etc

	[very difficult]
	PFC, etc

* When R4 driver is coming

	Supporting from Gen3 on some device is nice idea
	if possible. I think I2C can be good sample for it.

	If R4 project was started in earnest, it will be from Gen5,
	but not for all devices. Maybe 1 or 2 devices as beginning.
	see also [README.idea]

* How to handle R4 driver and existing driver

	We need to have both driver (R4 base driver / OS specific
	driver) should be exist in the same time for a while on each OS.
	Existing driver is more stable, and less maintenance cost to
	update. The decision to use which driver is user's choice.
	Because we don't know what happen on it for now.

	Therefore, we need to know/learn what happen to management /
	community / users, etc.
	After that, gradually increase the development weight of R4 base
	drivers over time. BSP or user will switches to R4 style
	step-by-step.

	In worst case, just removing R4 related code is easy and has no
	effect to each OS. see also [README.idea]

* How to manage R4 on each OS

	In development phase, each OS device operator can update
	R4 driver to create/fix the code.

	When release phase, each OS device operator need to
	post or publish the R4 patch first.
	And need to confirm use it on each OS second.
	Because of license issue.

* How to know R4 unauthorized customization

	Each R4 code will have hash to manage the version.
	see ${R4}/device/xxx/sha256sum.

	You can easily check the R4 version which is used on your OS.
	"custom driver" means "unauthorized customized driver" if
	your OS was released from Renesas BSP, or "not yet officially
	released driver" if you are coping R4 from official page.

		> script/version-check.sh ${your_os}/r4_i2c_v1*
	=>	r4_i2c_v1.h                   : custom driver
		r4_i2c_v1_rcar_gen3.c         : v1.0.0-rc1

* How to manage if R4 was changed on OS side first

	We need to protect unnecessary change from community as
	first step if possible. But if the change was necessary,
	we can accept it and adjust R4 to it anyway.

	Let's say 2 patterns exist.
	"big R4 API change" and "small R4 API change".

	And let's name 2 R4, "R4 of official page" as "official R4",
	"R4 which was copied to OS" as "copied R4".

	If "big R4 API change" was needed, then, R4 API design itself was wrong.
	This can be happen at -rc timing.

	"small R4 API change" might be happen.
	In such case, "copied R4" will be indicated as "custom driver",
	because there is difference from "official R4".
	But it has no effect to other OS, because it is "copied R4".
	In other words, nothing happen if you don't copy.

	If we ignore license issue here, we can update "official R4"
	as "small R4 API change".
	Then, R4 *minor* version number will be increased.

	Each OS will copy new "official R4", and adjust its wrapper driver.
	Then, it will be no longer "custom driver", but "official driver".
